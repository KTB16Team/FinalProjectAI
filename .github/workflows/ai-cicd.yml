name: AI ECR Build and Deploy to EC2  # 워크플로 이름 정의

on:
  push:
    branches: [ "dev" ]  # dev 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "dev" ]  # dev 브랜치로의 풀 리퀘스트가 생성될 때 트리거

jobs:
  # Docker 이미지 빌드 및 ECR 푸시 작업
  build-and-push:
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      # 1. GitHub 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4  

      # 2. Amazon ECR 로그인
      - name: Log in to Amazon ECR
        run: |
          # AWS 자격 증명 설정
          aws configure set aws_access_key_id ${{ secrets.AWS_ECR_IAM_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ECR_IAM_SECRET_ACCESS_KEY }}
          # Docker CLI를 사용하여 ECR 레지스트리에 로그인
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        working-directory: app  # `app` 디렉터리에서 실행
        run: docker build -t ai-service --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} .  # OPENAI_API_KEY를 빌드 인자로 전달

      # 4. ECR에 푸시할 이미지 태그 추가
      - name: Tag Docker image for ECR
        run: docker tag ai-service:latest ${{ secrets.ECR_REGISTRY }}:latest  # ECR에 푸시할 Docker 이미지 태그 지정

      # 5. Amazon ECR로 Docker 이미지 푸시
      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:latest  # 지정된 태그의 이미지를 ECR에 푸시

  # EC2에 배포 작업
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push  # build-and-push 작업이 완료되어야 실행 가능
    #continue-on-error: true  # 작업 실패 시에도 워크플로가 중단되지 않도록 설정

    steps:
      # 1. EC2에 접속하여 Docker 환경 설정 및 최신 이미지 가져오기
      - name: Connect to EC2 and Setup Docker
        uses: appleboy/ssh-action@master  # EC2에 SSH를 통해 연결
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스 호스트 주소
          username: ${{ secrets.EC2_USER }}  # EC2 사용자 이름
          key: ${{ secrets.EC2_SSH_KEY }}  # EC2 연결에 사용할 SSH 키
          script: |
            # 기존 Docker 이미지 정리
            docker image prune -a -f
            # Amazon ECR에서 최신 Docker 이미지 가져오기
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}:latest

      # 2. 기존 컨테이너 중지 및 삭제
      - name: Stop and Remove Existing Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ai-service라는 이름의 컨테이너가 있는 경우 중지 및 삭제
            if [ $(docker ps -a -q -f name=ai-service) ]; then
                docker stop ai-service || true  # 실행 중 컨테이너 정지
                docker rm ai-service || true   # 정지된 상태 포함 삭제
            fi

      # 3. 새로운 Docker 컨테이너 실행
      - name: Run New Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 새로운 Docker 컨테이너 실행 (AWS CloudWatch 로그 설정 포함)
            docker run -d -p 8000:8000 \
            --name ai-service \
            --log-driver=awslogs \
            --log-opt awslogs-region=ap-northeast-2 \
            --log-opt awslogs-group=AimoAI_LogsMonitoring \
            --log-opt awslogs-stream=AimoAI \
            ${{ secrets.ECR_REGISTRY }}:latest

      # 4. 헬스 체크 - 컨테이너가 실행 중인지 확인
      - name: Health Check Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 컨테이너가 시작될 시간을 기다림
            sleep 10
            # 컨테이너 실행 여부 확인
            if [ $(docker inspect -f '{{.State.Running}}' ai-service) != "true" ]; then
                echo "Error: Container failed to start."
                exit 1
            fi

  # 알림 작업 (성공 및 실패 모두 처리)
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-ec2]
  
    steps:
      - name: Notify Discord of Build and Deployment Result
        if: always()  # 항상 실행
        run: |
          # GitHub Actions 링크 생성
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
          # 성공 및 실패 여부 확인
          if [[ "${{ needs.build-and-push.result }}" == "success" && "${{ needs.deploy-to-ec2.result }}" == "success" ]]; then
            # 성공 Embed 메시지
            curl -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "✅ AI CI/CD 완료",
                  "description": "아싸! 성공!",
                  "color": 3066993,
                  "fields": [
                    { "name": "Build 결과", "value": "'"${{ needs.build-and-push.result }}"'", "inline": true },
                    { "name": "Deploy 결과", "value": "'"${{ needs.deploy-to-ec2.result }}"'", "inline": true }
                  ],
                  "footer": {
                    "text": "FinalProjectAI Github Action에서 전송됨 - '"$(TZ='Asia/Seoul' date +'%p %I:%M' | sed 's/AM/오전/g; s/PM/오후/g')"'" # 한국 시간 표시 
                  }
                }]
              }' \
              https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
          else
            # 실패 Embed 메시지
            curl -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "❌ AI CI/CD 실패",
                  "description": "헉 레전드 사건 발생!! [로그 확인하기]('"$ACTIONS_URL"')",
                  "color": 15158332,
                  "fields": [
                    { "name": "Build 결과", "value": "'"${{ needs.build-and-push.result }}"'", "inline": true },
                    { "name": "Deploy 결과", "value": "'"${{ needs.deploy-to-ec2.result }}"'", "inline": true }
                  ],
                  "footer": {
                    "text": "FinalProjectAI Github Action에서 전송됨 - '"$(TZ='Asia/Seoul' date +'%p %I:%M')"'" # 한국 시간 표시
                  }
                }]
              }' \
              https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
          fi
