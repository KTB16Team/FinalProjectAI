name: AI ECR Build and Push  # 워크플로 이름 정의

on:
  push:
    branches:
      - "dev"               
      - "feature/cicd-test" # feature/cicd-test 브랜치 푸시 시 작동
  pull_request:
    branches:
      - "dev"
      - "feature/cicd-test" # feature/cicd-test 브랜치의 PR 시에도 작동

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4  # GitHub Actions에서 소스 코드를 체크아웃하는 액션

      # 2. Amazon ECR에 로그인
      - name: Log in to Amazon ECR
        run: |
          # AWS 자격 증명 설정
          aws configure set aws_access_key_id ${{ secrets.AWS_ECR_IAM_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ECR_IAM_SECRET_ACCESS_KEY }}
          # ECR에 로그인하여 Docker CLI로 ECR에 접근할 수 있도록 설정
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Docker 이미지 빌드 (OPENAI_API_KEY 전달)
      - name: Build Docker image
        run: docker build -t ai-service -f app/Dockerfile --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} .

      # 4. ECR에 푸시할 이미지 태그 지정
      - name: Tag Docker image for ECR
        run: docker tag ai-service:latest ${{ secrets.ECR_REGISTRY }}:latest
        # ECR에 푸시하기 위해 이미지에 ECR 리포지토리 URI로 태그 추가

      # 5. ECR로 이미지 푸시
      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:latest
        # 태그가 지정된 이미지를 Amazon ECR 리포지토리에 푸시
        
      # 6. 성공적인 이미지 푸시 후 디스코드 알림 전송
      - name: Notify Discord
        if: success()  # 이전 단계들이 성공했을 경우에만 실행
        run: |
          # Discord 웹훅을 통해 알림 전송
          curl -H "Content-Type: application/json" \
            -d '{"content": "ECR에 이미지가 성공적으로 푸시되었습니다!"}' \
            https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
