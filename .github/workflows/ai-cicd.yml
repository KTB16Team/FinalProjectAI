name: AI ECR Build and Deploy to EC2  # 워크플로 이름 정의

on:
  push:
    branches: [ "dev" ]  # dev 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "dev" ]  # dev 브랜치로의 풀 리퀘스트가 생성될 때 트리거

jobs:
  # Docker 이미지 빌드 및 ECR 푸시 작업
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      result: ${{ steps.build.status }}  # 작업 결과를 outputs로 저장

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ECR_IAM_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ECR_IAM_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        working-directory: app
        run: docker build -t ai-service --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} .

      - name: Tag Docker image for ECR
        run: docker tag ai-service:latest ${{ secrets.ECR_REGISTRY }}:latest

      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:latest

      - name: Set Build Status
        id: build
        run: echo "status=success" >> $GITHUB_ENV

  # EC2에 배포 작업
  deploy-to-ec2:
    runs-on: ubuntu-latest

    outputs:
      result: ${{ steps.deploy.status }}

    steps:
      - name: Connect to EC2 and Setup Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker image prune -a -f
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}:latest

      - name: Stop and Remove Existing Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ $(docker ps -a -q -f name=ai-service) ]; then
                docker stop ai-service || true
                docker rm ai-service || true
            fi

      - name: Run New Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker run -d -p 8000:8000 \
            --name ai-service \
            --log-driver=awslogs \
            --log-opt awslogs-region=ap-northeast-2 \
            --log-opt awslogs-group=AimoAI_LogsMonitoring \
            --log-opt awslogs-stream=AimoAI \
            ${{ secrets.ECR_REGISTRY }}:latest

      - name: Set Deploy Status
        id: deploy
        run: echo "status=success" >> $GITHUB_ENV

  # 알림 작업
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Notify Discord of Build and Deployment Result
        run: |
          ACTIONS_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP=$(TZ='Asia/Seoul' date +'%p %I:%M' | sed 's/AM/오전/g; s/PM/오후/g')
          BUILD_STATUS=${{ needs.build-and-push.outputs.result }}
          DEPLOY_STATUS=${{ needs.deploy-to-ec2.outputs.result }}

          if [[ "$BUILD_STATUS" == "success" && "$DEPLOY_STATUS" == "success" ]]; then
            curl -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "✅ AI CI/CD 완료",
                  "description": "모든 작업 성공!",
                  "color": 3066993,
                  "fields": [
                    { "name": "Build 결과", "value": "'"$BUILD_STATUS"'", "inline": true },
                    { "name": "Deploy 결과", "value": "'"$DEPLOY_STATUS"'", "inline": true }
                  ],
                  "footer": {
                    "text": "FinalProjectAI Github Action에서 전송됨 - '"$TIMESTAMP"'"
                  }
                }]
              }' \
              https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
          else
            curl -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "❌ AI CI/CD 실패",
                  "description": "작업 중 실패 발생",
                  "color": 15158332,
                  "fields": [
                    { "name": "Build 결과", "value": "'"$BUILD_STATUS"'", "inline": true },
                    { "name": "Deploy 결과", "value": "'"$DEPLOY_STATUS"'", "inline": true }
                  ],
                  "footer": {
                    "text": "FinalProjectAI Github Action에서 전송됨 - '"$TIMESTAMP"'"
                  }
                }]
              }' \
              https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
