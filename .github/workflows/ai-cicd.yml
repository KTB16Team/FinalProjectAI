name: AI ECR Build and Deploy to EC2  # 워크플로 이름 정의

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4  # GitHub Actions에서 소스 코드를 체크아웃하는 액션

      # 2. Amazon ECR에 로그인
      - name: Log in to Amazon ECR
        run: |
          # AWS 자격 증명 설정
          aws configure set aws_access_key_id ${{ secrets.AWS_ECR_IAM_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ECR_IAM_SECRET_ACCESS_KEY }}
          # ECR에 로그인하여 Docker CLI로 ECR에 접근할 수 있도록 설정
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Docker 이미지 빌드 (OPENAI_API_KEY 전달)
      - name: Build Docker image
        working-directory: app  # `app` 디렉터리에서 실행
        run: docker build -t ai-service --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} .


      # 4. ECR에 푸시할 이미지 태그 지정
      - name: Tag Docker image for ECR
        run: docker tag ai-service:latest ${{ secrets.ECR_REGISTRY }}:latest
        # ECR에 푸시하기 위해 이미지에 ECR 리포지토리 URI로 태그 추가

      # 5. ECR로 이미지 푸시
      - name: Push to Amazon ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:latest
        # 태그가 지정된 이미지를 Amazon ECR 리포지토리에 푸시

      # 6. EC2에 SSH 연결하여 Docker 컨테이너 실행 및 헬스체크
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            #도커 이미지 삭제
            docker image prune -a -f
            # ECR에서 최신 이미지 Pull
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}:latest
            
            # 기존 컨테이너 중지 및 삭제
            if [ $(docker ps -q -f name=ai-service) ]; then
                docker stop ai-service
                docker rm ai-service
            fi
            
            # 새로운 컨테이너 실행 (CloudWatch 로그 설정 추가)
            docker run -d -p 8000:8000 \
            --name ai-service \
            --log-driver=awslogs \
            --log-opt awslogs-region=ap-northeast-2 \
            --log-opt awslogs-group=AimoAI_LogsMonitoring \
            --log-opt awslogs-stream=AimoAI \
            ${{ secrets.ECR_REGISTRY }}:latest
            
            # 헬스체크 - 컨테이너가 실행 중인지 확인
            sleep 10  # 컨테이너가 시작될 시간을 기다림
            if [ $(docker inspect -f '{{.State.Running}}' ai-service) != "true" ]; then
                echo "Error: Container failed to start."
                exit 1
            fi

      # 7. 전체 작업 성공 시 최종 디스코드 알림 전송
      - name: Notify Discord of Successful Deployment
        if: success()  # 모든 단계가 성공한 경우에만 실행
        run: |
          # Discord 웹훅을 통해 전체 과정 완료 알림 전송
          curl -H "Content-Type: application/json" \
            -d '{"content": "CI/CD 작업이 성공적으로 완료되었습니다! Docker 이미지가 ECR에 푸시되고, EC2에서 컨테이너가 실행되었습니다."}' \
            https://discord.com/api/webhooks/1303626195258314776/S8p1np6wTAelIdjyrXHdRyM6Me6lD6BzuylQ7ZTJN6t6IgToZnbiUPnBHbA8RO7UAlMx
